Readme
============

To make the code maintainable
To make the collaboration easily
To make the code readable


Coding Style (draft)
====================

1. Folder structure and name space, Keep clear folder structure -

    Data - saved data files or local database <FOLDER>
    Lib - external library goes here <FOLDER>

    Model - class to access data or global configuration <GROUP>
    View - different View for different controller <GROUP>
    Main - thats one of modules name, we will splite app to different module <GROUP>
    
    for example -
    
    Data
    ====
        local.sqilte - sqilte database file
        cache.file - common text file or binary file
    Model
    =====
        Bootstrap.h // Application bootstrap, running from AppDelegate, init all necessary value for app
        Bootstrap.m

        AppConfig.h // Application configuration global value
        AppConfig.m
        
        Model.h // This is the parent class for all models
        Model.m
        
        Post.h - for Table Post // basically Model name is as same as Table name with Capital First Letter
        Post.m - for Table Post
    View
    ====
        Main <module name, or Main_Contact>
        ====
            MainHomeContentView.h
            MainHomeContentView.m
    
    Main
    ====
        Interface
        =========
            Main.storyboard
            Contact.storyboard
            Contact_Todo.storyboard

        Contact <sub module>
        ========
            Todo
            ====
                ContactTodoController.h
                ContactTodoController.m

            ContactController.h
            ContracController.m

        MainController.h
        MainController.m
        
        
2. Model-View-Controller

    Model - Xxxxx
        
        <Model attributes - mapping to table fields>

        id<ControllerDelegate> delegate;

        NSInter xxxxId;
        NSString name;
        .....
        
        <Model methods - mapping to database CRUD>
        
        fetchAll:(NSMutalbeArray *)xxxxArray Filter:(NSString *)filter;
        fetchAllByUser:(NSMutableArray *)xxxxArray Filter:(NSString *)filter UserId:(NSInteger)userId;
        
        add
        update
        remove


    <We will need this for callback, for example, networking is async operation, when it's complete
    will have to notify the initializer>

    ControllerDelegate
        
        onNotifyOperationComplete

    Controller
        
        Model * xxxx;
        NSMutableArray * xxxxArray;
        ......
        
        <Call model method to get data>
        
        [xxxx fetchAll:self.xxxxArray Filter:@""];

        <Use xxxxArray to render View>
        
        Model * xxxx = [self.xxxxArray objectAtIndex:IndexPath.row];
        cell.name.text = xxxx.name;
        
        
    View
    
        IBOutlet UIView *subview0;
        IBOutlet UILable *subview1;

    Interface
            
        Main.storyboard
        .....
        
        <Resource ID>
        <Module_Submodule_Controller>

        Main_Contact_Todo

        
3. Comment and code structure

    Comment will always put on the top of codes
    
    //comment is here
    [xxxx setHidden:NO];
    
    Use large marks to comment different part functinality
    
    //====================
    // Pick View Delegate
    //====================
    
    ......
    
    //====================
    // Table View Delegate
    //====================
    
    .......
    
    Use #define at one global header file
    
    Use #if to hide code block <not // >, // to hide one line code
    
    #if false
    
    <code block>
    .....
    .....
    .....
    
    #endif
    
    // one line code
    
    
    In Controller, put methods from one delegate in one place

    Controller <Delegate1, Delegate2, Delegate3>
    
    //===============
    // Delegate1
    //===============

    .......
    
    //===============
    // Delegate2
    //===============

    .......
    
    //===============
    // Delegate3
    //===============

    .......
    
    In Controller, put initialization code in setup and call it from ViewDidLoad or else, 
    thus we will easy to remove it without influence default behaviour of controller
    
    - (void) ViewDidLoad
    {
        [super ViewDidLoad];
        [self setup];
    }
    
    // http://......//...... (you can put some reference here, for you to remember where to learned the code)

    - (void) setup
    {
        // use comment as less as possible
        // initialization code for one view, should put together
        // initialization code for different views, should add at least one empty line between them

        self.navigationItem.rightBarItem = ......
        .....

        <empty line>
        <empty line>

        self.titleBar .......
    }



