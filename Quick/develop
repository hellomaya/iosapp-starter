DESIGN
=========

Authentication Module

you will have to create the authentication module for current user, 
the user type could be guest, logged-in, 
commonly the guest will be able to view those public pages and data, 
and for registered user who is logged in the app, he will have full functionality of their own.

Basically, the app will deal with two situation of the logged in user, 
when the user first time logged in the app, 
it will have to authenticate the user with API, 
and then save its credential to local storage, thus, the next time, app start, user don’t have to login again.

This process could be complex, 
as many apps today added Social Network API to access FB, Twitter, Google+ or even more, 
and the workflow will depend on these SDK too.


Model + Networking

After the user logged in, they will be able to view all data, and this time, 
the app will have to fetch the data and for later use, 
they will save these data in local storage, think about an app for example, 
like twitter, and for each tweet, it will have 1000 bytes, 
and if the user have more than 10million tweets, and that will have 1,000,000 * 1000 = 10,000 MB data in total.

How could he view all these data in the app? Is it possible? 
None of the local storage today can save that large data, 
so the local data cache will save part of the data, probably the latest pages.

Suppose we have 100 tweet as one page for each time, and we will have many pages, 
we will have a data/traffics window to be the threshold to save all these pages into local storage,
and then we can fetch them quickly from it, don’t have to access the network again…

The better way, at first we will fetch a small amount of tweets, 
and then we can fetch them at back-ground as large amount, 
so we don’t have to fetch them from networking, coz we already save them in local storage…

Commonly in the app, we fetch an small amount of data firstly, 
and then we will add data to it as the user reading the page to page, 
that sounds very good, but when user reading through 1 to 1000 page, 
it will be a lot data in memory too, that’s obviously not the perfect way…

To display the data in the memory, 
we also need the same data window to control how many pages we should display in current page, 
and all these data in local storage or in network, 
and same time, there is a background task to evaluate the size of the window,
and do fetch the latest data into the system same time…

That’s just the normal way to design the model and network.

To think about Model, we commonly put Model and network together in the same class, 
well it looks fine, but when there are many networking functions in the same model, 
we will feel that’s kind noise with bad readable class definition…

I think the better way is to define Model with its Interface like this way : 

Model

	property A
	property B

	
Model Networking <Category>

	method A
	method B

Model Database <Category>

	method A
	method B



Cache (Memory + Disk)


Render Engine (Image + Text)


Tweet Engine (Text, Image + Upload, Sync)









